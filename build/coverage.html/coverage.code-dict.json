{"/home/travis/build/npmtest/node-npmtest-os-service/test.js":"/* istanbul instrument in package npmtest_os_service */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-os-service/lib.npmtest_os_service.js":"/* istanbul instrument in package npmtest_os_service */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_os_service = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_os_service = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-os-service/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-os-service && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_os_service */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_os_service\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_os_service.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_os_service.rollup.js'] =\n            local.assetsDict['/assets.npmtest_os_service.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_os_service.__dirname + '/lib.npmtest_os_service.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-os-service/node_modules/os-service/index.js":"\nvar child_process = require(\"child_process\");\nvar fs = require(\"fs\");\nvar os = require(\"os\");\nvar util = require (\"util\");\n\nvar serviceWrap;\nvar runInitialised = false;\n\nvar linuxStartStopScript = [\n\t'#!/bin/bash',\n\t'',\n\t'### BEGIN INIT INFO',\n\t'# Provides:          ##NAME##',\n\t'# Required-Start:    ',\n\t'# Required-Stop:     ',\n\t'# Default-Start:     ##RUN_LEVELS_ARR##',\n\t'# Default-Stop:      0 1 6',\n\t'# Short-Description: Start ##NAME## at boot time',\n\t'# Description:       Enable ##NAME## service.',\n\t'### END INIT INFO',\n\t'',\n\t'# chkconfig:   ##RUN_LEVELS_STR## 99 1',\n\t'# description: ##NAME##',\n\t'',\n\t'set_pid () {',\n\t'\tunset PID',\n\t'\t_PID=`head -1 \"##PROGRAM_PATH##.pid\" 2>/dev/null`',\n\t'\tif [ $_PID ]; then',\n\t'\t\tkill -0 $_PID 2>/dev/null && PID=$_PID',\n\t'\tfi',\n\t'}',\n\t'',\n\t'force_reload () {',\n\t'\tstop',\n\t'\tstart',\n\t'}',\n\t'',\n\t'restart () {',\n\t'\tstop',\n\t'\tstart',\n\t'}',\n\t'',\n\t'start () {',\n\t'\tCNT=5',\n\t'',\n\t'\tset_pid',\n\t'',\n\t'\tif [ -z \"$PID\" ]; then',\n\t'\t\techo starting ##NAME##',\n\t'',\n\t'\t\t\"##NODE_PATH##\" ##NODE_ARGS## \"##PROGRAM_PATH##\" ##PROGRAM_ARGS## >/dev/null 2>&1 &',\n\t'',\n\t'\t\techo $! > \"##PROGRAM_PATH##.pid\"',\n\t'',\n\t'\t\twhile [ : ]; do',\n\t'\t\t\tset_pid',\n\t'',\n\t'\t\t\tif [ -n \"$PID\" ]; then',\n\t'\t\t\t\techo started ##NAME##',\n\t'\t\t\t\tbreak',\n\t'\t\t\telse',\n\t'\t\t\t\tif [ $CNT -gt 0 ]; then',\n\t'\t\t\t\t\tsleep 1',\n\t'\t\t\t\t\tCNT=`expr $CNT - 1`',\n\t'\t\t\t\telse',\n\t'\t\t\t\t\techo ERROR - failed to start ##NAME##',\n\t'\t\t\t\t\tbreak',\n\t'\t\t\t\tfi',\n\t'\t\t\tfi',\n\t'\t\tdone',\n\t'\telse',\n\t'\t\techo ##NAME## is already started',\n\t'\tfi',\n\t'}',\n\t'',\n\t'status () {',\n\t'\tset_pid',\n\t'',\n\t'\tif [ -z \"$PID\" ]; then',\n\t'\t\texit 1',\n\t'\telse',\n\t'\t\texit 0',\n\t'\tfi',\n\t'}',\n\t'',\n\t'stop () {',\n\t'\tCNT=5',\n\t'',\n\t'\tset_pid',\n\t'',\n\t'\tif [ -n \"$PID\" ]; then',\n\t'\t\techo stopping ##NAME##',\n\t'',\n\t'\t\tkill $PID',\n\t'',\n\t'\t\twhile [ : ]; do',\n\t'\t\t\tset_pid',\n\t'',\n\t'\t\t\tif [ -z \"$PID\" ]; then',\n\t'\t\t\t\trm \"##PROGRAM_PATH##.pid\"',\n\t'\t\t\t\techo stopped ##NAME##',\n\t'\t\t\t\tbreak',\n\t'\t\t\telse',\n\t'\t\t\t\tif [ $CNT -gt 0 ]; then',\n\t'\t\t\t\t\tsleep 1',\n\t'\t\t\t\t\tCNT=`expr $CNT - 1`',\n\t'\t\t\t\telse',\n\t'\t\t\t\t\techo ERROR - failed to stop ##NAME##',\n\t'\t\t\t\t\tbreak',\n\t'\t\t\t\tfi',\n\t'\t\t\tfi',\n\t'\t\tdone',\n\t'\telse',\n\t'\t\techo ##NAME## is already stopped',\n\t'\tfi',\n\t'}',\n\t'',\n\t'case $1 in',\n\t'\tforce-reload)',\n\t'\t\tforce_reload',\n\t'\t\t;;',\n\t'\trestart)',\n\t'\t\trestart',\n\t'\t\t;;',\n\t'\tstart)',\n\t'\t\tstart',\n\t'\t\t;;',\n\t'\tstatus)',\n\t'\t\tstatus',\n\t'\t\t;;',\n\t'\tstop)',\n\t'\t\tstop',\n\t'\t\t;;',\n\t'\t*)',\n\t'\t\techo \"usage: $0 <force-reload|restart|start|status|stop>\"',\n\t'\t\texit 1',\n\t'\t\t;;',\n\t'esac'\n];\n\nvar linuxSystemUnit = [\n\t'[Unit]',\n\t'Description=##NAME##',\n\t'After=network.target',\n\t'',\n\t'[Service]',\n\t'Type=simple',\n\t'StandardOutput=null',\n\t'StandardError=null',\n\t'UMask=0007',\n\t'ExecStart=##NODE_PATH## ##NODE_ARGS## ##PROGRAM_PATH## ##PROGRAM_ARGS##',\n\t'',\n\t'[Install]'\n];\n\nfunction getServiceWrap () {\n\tif (! serviceWrap)\n\t\tserviceWrap = require (\"./build/Release/service\");\n\treturn serviceWrap;\n}\n\nfunction runProcess(path, args, cb) {\n\tvar child = child_process.spawn(path, args);\n\n\tchild.on(\"exit\", function(code) {\n\t\tif (code != 0) {\n\t\t\tvar error = new Error(path + \" failed: \" + code)\n\t\t\terror.code = code\n\t\t\tcb(error);\n\t\t} else {\n\t\t\tcb();\n\t\t}\n\t});\n\n\tchild.on(\"error\", function(error) {\n\t\tif (error) {\n\t\t\tcb(error);\n\t\t} else {\n\t\t\tcb();\n\t\t}\n\t});\n}\n\nfunction add (name, options, cb) {\n\tif (! cb) {\n\t\tcb = arguments[1];\n\t\toptions = {};\n\t}\n\n\tvar nodePath = (options && options.nodePath)\n\t\t\t? options.nodePath\n\t\t\t: process.execPath;\n\n\tvar programPath = (options && options.programPath)\n\t\t\t? options.programPath\n\t\t\t: process.argv[1];\n\n\tvar username = options ? (options.username || null) : null;\n\tvar password = options ? (options.password || null) : null;\n\n\tif (os.platform() == \"win32\") {\n\t\tvar displayName = (options && options.displayName)\n\t\t\t\t? options.displayName\n\t\t\t\t: name;\n\t\t\n\t\tvar serviceArgs = [];\n\n\t\tserviceArgs.push (nodePath);\n\n\t\tif (options && options.nodeArgs)\n\t\t\tfor (var i = 0; i < options.nodeArgs.length; i++)\n\t\t\t\tserviceArgs.push (options.nodeArgs[i]);\n\n\t\tserviceArgs.push (programPath);\n\t\n\t\tif (options && options.programArgs)\n\t\t\tfor (var i = 0; i < options.programArgs.length; i++)\n\t\t\t\tserviceArgs.push (options.programArgs[i]);\n\t\n\t\tfor (var i = 0; i < serviceArgs.length; i++)\n\t\t\tserviceArgs[i] = \"\\\"\" + serviceArgs[i] + \"\\\"\";\n\t\n\t\tvar servicePath = serviceArgs.join (\" \");\n\n\t\ttry {\n\t\t\tgetServiceWrap ().add (name, displayName, servicePath, username,\n\t\t\t\t\tpassword);\n\t\t\tcb();\n\t\t} catch (error) {\n\t\t\tcb(error);\n\t\t}\n\t} else {\n\t\tvar nodeArgs = [];\n\t\tif (options && options.nodeArgs)\n\t\t\tfor (var i = 0; i < options.nodeArgs.length; i++)\n\t\t\t\tnodeArgs.push (\"\\\"\" + options.nodeArgs[i] + \"\\\"\");\n\n\t\tvar programArgs = [];\n\t\tif (options && options.programArgs)\n\t\t\tfor (var i = 0; i < options.programArgs.length; i++)\n\t\t\t\tprogramArgs.push (\"\\\"\" + options.programArgs[i] + \"\\\"\");\n\t\t\n\t\tvar runLevels = [2, 3, 4, 5];\n\t\tif (options && options.runLevels)\n\t\t\trunLevels = options.runLevels;\n\n\t\tvar nodeArgsStr = nodeArgs.join(\" \");\n\t\tvar programArgsStr = programArgs.join(\" \");\n\n\t\tvar initPath = \"/etc/init.d/\" + name;\n\t\tvar systemPath = \"/usr/lib/systemd/system/\" + name + \".service\";\n\t\tvar ctlOptions = {\n\t\t\tmode: 493 // rwxr-xr-x\n\t\t};\n\n\t\tfs.stat(\"/usr/lib/systemd/system\", function(error, stats) {\n\t\t\tif (error) {\n\t\t\t\tif (error.code == \"ENOENT\") {\n\t\t\t\t\tvar startStopScript = [];\n\n\t\t\t\t\tfor (var i = 0; i < linuxStartStopScript.length; i++) {\n\t\t\t\t\t\tvar line = linuxStartStopScript[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tline = line.replace(\"##NAME##\", name);\n\t\t\t\t\t\tline = line.replace(\"##NODE_PATH##\", nodePath);\n\t\t\t\t\t\tline = line.replace(\"##NODE_ARGS##\", nodeArgsStr);\n\t\t\t\t\t\tline = line.replace(\"##PROGRAM_PATH##\", programPath);\n\t\t\t\t\t\tline = line.replace(\"##PROGRAM_ARGS##\", programArgsStr);\n\t\t\t\t\t\tline = line.replace(\"##RUN_LEVELS_ARR##\", runLevels.join(\" \"));\n\t\t\t\t\t\tline = line.replace(\"##RUN_LEVELS_STR##\", runLevels.join(\"\"));\n\t\t\t\t\t\t\n\t\t\t\t\t\tstartStopScript.push(line);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar startStopScriptStr = startStopScript.join(\"\\n\");\n\n\t\t\t\t\tfs.writeFile(initPath, startStopScriptStr, ctlOptions, function(error) {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tcb(new Error(\"writeFile(\" + initPath + \") failed: \" + error.message));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trunProcess(\"chkconfig\", [\"--add\", name], function(error) {\n\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\tif (error.code == \"ENOENT\") {\n\t\t\t\t\t\t\t\t\t\trunProcess(\"update-rc.d\", [name, \"defaults\"], function(error) {\n\t\t\t\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\t\t\t\tcb(new Error(\"update-rd.d failed: \" + error.message));\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tcb()\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcb(new Error(\"chkconfig failed: \" + error.message));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcb()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tcb(new Error(\"stat(/usr/lib/systemd/system) failed: \" + error.message));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar systemUnit = [];\n\n\t\t\t\tfor (var i = 0; i < linuxSystemUnit.length; i++) {\n\t\t\t\t\tvar line = linuxSystemUnit[i];\n\t\t\t\t\t\n\t\t\t\t\tline = line.replace(\"##NAME##\", name);\n\t\t\t\t\tline = line.replace(\"##NODE_PATH##\", nodePath);\n\t\t\t\t\tline = line.replace(\"##NODE_ARGS##\", nodeArgsStr);\n\t\t\t\t\tline = line.replace(\"##PROGRAM_PATH##\", programPath);\n\t\t\t\t\tline = line.replace(\"##PROGRAM_ARGS##\", programArgsStr);\n\t\t\t\t\t\n\t\t\t\t\tsystemUnit.push(line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar systemUnitStr = systemUnit.join(\"\\n\");\n\n\t\t\t\tfs.writeFile(systemPath, systemUnitStr, ctlOptions, function(error) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tcb(new Error(\"writeFile(\" + systemPath + \") failed: \" + error.message));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trunProcess(\"systemctl\", [\"enable\", name], function(error) {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\tcb(new Error(\"systemctl failed: \" + error.message));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcb()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\t\n\treturn this;\n}\n\nfunction isStopRequested () {\n\treturn getServiceWrap ().isStopRequested ();\n}\n\nfunction remove (name, cb) {\n\tif (os.platform() == \"win32\") {\n\t\ttry {\n\t\t\tgetServiceWrap ().remove (name);\n\t\t\tcb();\n\t\t} catch (error) {\n\t\t\tcb(error);\n\t\t}\n\t} else {\n\t\tvar initPath = \"/etc/init.d/\" + name;\n\t\tvar systemPath = \"/usr/lib/systemd/system/\" + name + \".service\";\n\n\t\tfunction removeCtlPaths() {\n\t\t\tfs.unlink(initPath, function(error) {\n\t\t\t\tif (error) {\n\t\t\t\t\tif (error.code == \"ENOENT\") {\n\t\t\t\t\t\tfs.unlink(systemPath, function(error) {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\tcb(new Error(\"unlink(\" + systemPath + \") failed: \" + error.message))\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcb()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb(new Error(\"unlink(\" + initPath + \") failed: \" + error.message))\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcb()\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tfs.stat(\"/usr/lib/systemd/system\", function(error, stats) {\n\t\t\tif (error) {\n\t\t\t\tif (error.code == \"ENOENT\") {\n\t\t\t\t\trunProcess(\"chkconfig\", [\"--del\", name], function(error) {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tif (error.code == \"ENOENT\") {\n\t\t\t\t\t\t\t\trunProcess(\"update-rc.d\", [name, \"remove\"], function(error) {\n\t\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\t\tcb(new Error(\"update-rc.d failed: \" + error.message));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tremoveCtlPaths()\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcb(new Error(\"chkconfig failed: \" + error.message));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tremoveCtlPaths()\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tcb(new Error(\"stat(/usr/lib/systemd/system) failed: \" + error.message));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trunProcess(\"systemctl\", [\"disable\", name], function(error) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tcb(new Error(\"systemctl failed: \" + error.message));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremoveCtlPaths()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction run (stdoutLogStream, stderrLogStream, stopCallback) {\n\tif (! stopCallback) {\n\t\tstopCallback = stderrLogStream;\n\t\tstderrLogStream = stdoutLogStream;\n\t}\n\n\tif (! runInitialised) {\n\t\tprocess.__defineGetter__('stdout', function() {\n\t\t\treturn stdoutLogStream;\n\t\t});\n\t\t\n\t\tprocess.__defineGetter__('stderr', function() {\n\t\t\treturn stderrLogStream;\n\t\t});\n\t\t\n\t\tif (os.platform() == \"win32\") {\n\t\t\tsetInterval (function () {\n\t\t\t\tif (isStopRequested ()) {\n\t\t\t\t\tstopCallback ();\n\t\t\t\t}\n\t\t\t}, 2000);\n\t\t} else {\n\t\t\tprocess.on(\"SIGINT\", function() {\n\t\t\t\tstopCallback ();\n\t\t\t});\n\n\t\t\tprocess.on(\"SIGTERM\", function() {\n\t\t\t\tstopCallback ();\n\t\t\t});\n\t\t}\n\t\t\n\t\trunInitialised = true;\n\t}\n\t\n\tif (os.platform() == \"win32\") {\n\t\tgetServiceWrap ().run ();\n\t}\n}\n\nfunction stop (rcode) {\n\tif (os.platform() == \"win32\") {\n\t\tgetServiceWrap ().stop (rcode);\n\t}\n\tprocess.exit (rcode || 0);\n}\n\nexports.add = add;\nexports.remove = remove;\nexports.run = run;\nexports.stop = stop;\n"}